# This is a workflow to build and release for platforms defined in the export configuration file (export_template.cfg)

name: CI / CD

# Whenever a tag push matching pattern "v*" then run the job
on:
  push:
    tags:
      - "v*"

  workflow_dispatch:

  pull_request:
    branches: [ main ]
    paths:
      - 'game/**'
      - '.github/**'

permissions:
  contents: write
  pages: write
  id-token: write
    
jobs:
  build-game:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: find latest godot patch for project version
        run: |
          # Read the version number from the project.godot file
          version_prefix=$(grep -oP 'config/features=PackedStringArray\("\K[^\"]+' ./game/project.godot)

          echo found minor version: ${version_prefix}
          # Initialize the patch number and the last valid version variable
          patch_number=1
          last_valid_version=""

          # Loop to increment the patch number and check the website response
          while true; do
              # Construct the version string
              version="${version_prefix}.${patch_number}"
              
              # Make the website request
              echo "Trying to download version $version ..."
              response=$(curl -o /dev/null -s -w "%{http_code}\n" "https://godotengine.org/download/archive/${version}-stable")
              # response=$(curl -o /dev/null -s -w "%{http_code}\n" "https://downloads.tuxfamily.org/godotengine/${version}")

              # Check the response code
              if [ "$response" = "404" ]; then
                  # If 404 is received, break the loop
                  echo "Version $version not found."
                  break
              else
                  # If the response is not 404, store the version and increment the patch number
                  echo "Version $version found... Trying next version..."
                  last_valid_version=$version
                  ((patch_number++))
              fi
          done

          # Output the last valid version to environment.
          # Godot's patchless versions aren't suffixed with .0, hence the following.

          if [[ "$last_valid_version" = "*.0" ]]; then
            echo Writing "GODOT_VERSION=$version_prefix" to env
            echo "GODOT_VERSION=$version_prefix" >> $GITHUB_ENV
          else
            echo Writing "GODOT_VERSION=$last_valid_version" to env
            echo "GODOT_VERSION=$last_valid_version" >> $GITHUB_ENV
          fi

      - name: Build game
        id: build
        uses: firebelley/godot-export@v6.0.0
        with:
          # Defining all the required inputs
          godot_executable_download_url: https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          cache: true
          relative_project_path: ./game
          use_preset_export_path: true
          archive_output: ${{ startsWith(github.ref, 'refs/tags/') }}    

      - name: Show build directory
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo Build: ${{ steps.build.outputs.build_directory }}
          FOLDER_PATH="${{ steps.build.outputs.build_directory }}"
          if [ -d "$FOLDER_PATH" ]; then
            ls -R "$FOLDER_PATH"
          else
            ls -R .
          fi

      - name: Show archive directory
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo Archive: ${{ steps.build.outputs.archive_directory }}
          FOLDER_PATH="${{ steps.build.outputs.archive_directory }}"
          if [ -d "$FOLDER_PATH" ]; then
            ls -R "$FOLDER_PATH"
          else
            ls -R .
          fi
          
      - name: Create release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          tag: ${{ github.ref_name }}
          artifacts: |
            ${{ steps.build.outputs.archive_directory }}/**/*.zip
          #  ${{ steps.build.outputs.build_directory }}/**/*.exe
          #  ${{ steps.build.outputs.build_directory }}/**/*.x86_64

      - name: Download releases
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # list all releases
          gh release list --limit 100 --json tagName -q '.[].tagName' | while read TAG; do
            if [ ! -d "site/versions/$TAG" ]; then
              echo "Fetching $TAG..."
              gh release download "$TAG" --pattern "Web.zip" --dir tmp
              unzip -o tmp/Web.zip -d site/versions/$TAG
              rm tmp/Web.zip
            fi
          done

      - name: Create index.html
        run: |
          cat > site/index.html <<'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Play Versions</title>
          </head>
          <body>
            <h1>Select a version to play</h1>
            <select id="versionSelect"></select>
            <iframe id="gameFrame" width="800" height="600"></iframe>
            <script>
              async function loadVersions() {
                const repo = window.location.pathname.split("/")[1] + "/" + window.location.pathname.split("/")[2];
                const resp = await fetch(`https://api.github.com/repos/${repo}/releases`);
                const releases = await resp.json();
                const versions = releases.map(r => r.tag_name).reverse();
                const select = document.getElementById("versionSelect");
                const iframe = document.getElementById("gameFrame");
                versions.forEach(v => {
                  const opt = document.createElement("option");
                  opt.value = v;
                  opt.textContent = v;
                  select.appendChild(opt);
                });
                select.onchange = () => {
                  iframe.src = "versions/" + select.value + "/index.html";
                };
                select.value = versions[0];
                iframe.src = "versions/" + versions[0] + "/index.html";
              }
              loadVersions();
            </script>
          </body>
          </html>
          EOF          

      - name: Setup pages
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/configure-pages@v5

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-pages-artifact@v3
        with:
          # path: '/home/runner/.local/share/godot/builds/Web'
          path: site

      - name: Deploy to GitHub Pages
        if: startsWith(github.ref, 'refs/tags/')
        id: deployment
        uses: actions/deploy-pages@v4
